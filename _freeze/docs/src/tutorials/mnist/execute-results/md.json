{
  "hash": "cb52ac7dbc3ba18a9dbd60671c92d906",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Joint Energy Models\n---\n\n\n\n\n\n\n## Data\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nnobs = 1000\nn_digits = 28\nXtrain, ytrain, Xval, yval, Xtest, ytest = load_mnist_data(nobs=nobs, n_digits=n_digits)\n```\n:::\n\n\n## `JointEnergyModel`\n\n### Hyperparameters\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nD = n_digits               \nK = 10                      \nM = 128\nlr = 1e-3                \nnum_epochs = 100\nmax_patience = 5            \nbatchsize = Int(round(nobs/10))\n```\n:::\n\n\n### Initializing the model\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nactivation = relu\nmlp = Chain(\n    MLUtils.flatten,\n    Dense(prod((D,D)), M, activation),\n    # BatchNorm(M, activation),\n    # Dense(M, M),\n    # BatchNorm(M, activation),\n    Dense(M, K),\n)\n\n# We initialize the full model\nùíüx = Uniform(-1,1)\nùíüy = Categorical(ones(K) ./ K)\nsampler = ConditionalSampler(ùíüx, ùíüy, input_size=(D,D), batch_size=10)\njem = JointEnergyModel(\n    mlp, sampler;\n    sampling_steps=20,\n)\n```\n:::\n\n\n### Training loop\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n# Initialise \nopt = Adam(lr)\nopt_state = Flux.setup(opt, jem)\ntrain_set = DataLoader((Xtrain, ytrain); batchsize=batchsize, shuffle=true)\nval_set = DataLoader((Xval, yval); batchsize=batchsize, shuffle=false)\ntest_set = DataLoader((Xtest, ytest); batchsize=batchsize, shuffle=false)\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nlogs = train_model(\n    jem, train_set, opt_state; num_epochs=num_epochs, val_set=val_set,\n    verbosity = minimum([num_epochs, 10]),\n    Œ± = [1.0,1.0,1e-2],\n    # use_class_loss=false,\n    # use_gen_loss=false,\n    # use_reg_loss=false,\n)\n```\n:::\n\n\n### The final evaluation\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nn_iter = 200\n_w = 1500\nplts = []\nneach = 10\nfor i in 1:10\n    x = jem.sampler(jem.chain, jem.sampling_rule; niter=n_iter, n_samples=neach, y=i)\n    plts_i = []\n    for j in 1:size(x, 3)\n        xj = x[:,:,j]\n        plts_i = [plts_i..., heatmap(rotl90(xj), axis=nothing, cb=false)]\n    end\n    plt = plot(plts_i..., size=(_w,0.10*_w), layout=(1,10))\n    plts = [plts..., plt]\nend\nplot(plts..., size=(_w,_w), layout=(10,1))\n```\n:::\n\n\n#### From Scratch\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nsampler = UnconditionalSampler(ùíüx; input_size=(D,D))\nconditional_sampler = ConditionalSampler(ùíüx, ùíüy; input_size=(D,D))\nopt = ImproperSGLD(10.0,0.005)\nn_iter = 256\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\n_w = 1500\nplts = []\nneach = 10\nfor i in 1:10\n    x = conditional_sampler(jem.chain, opt; niter=n_iter, y=i, n_samples=neach)\n    plts_i = []\n    for j in 1:size(x,3)\n        xj = x[:,:,j]\n        plts_i = [plts_i..., heatmap(rotl90(xj), axis=nothing, cb=false)]\n    end\n    plt = plot(plts_i..., size=(_w,0.10*_w), layout=(1,10))\n    plts = [plts..., plt]\nend\nplot(plts..., size=(_w,_w), layout=(10,1))\n```\n:::\n\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\n_w = 1500\nplts = []\nneach = 10\nfor i in 1:10\n    x = sampler(jem.chain, opt; niter=n_iter, y=i, n_samples=neach)\n    plts_i = []\n    for j in 1:size(x,3)\n        xj = x[:,:,j]\n        plts_i = [plts_i..., heatmap(rotl90(xj), axis=nothing, cb=false)]\n    end\n    plt = plot(plts_i..., size=(_w,0.10*_w), layout=(1,10))\n    plts = [plts..., plt]\nend\nplot(plts..., size=(_w,_w), layout=(10,1))\n```\n:::\n\n\n",
    "supporting": [
      "mnist_files"
    ],
    "filters": []
  }
}