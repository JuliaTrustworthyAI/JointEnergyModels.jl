{
  "hash": "8d26f827b22cadaf45d98344b37a0051",
  "result": {
    "markdown": "```@meta\nCurrentModule = JointEnergyModels\n```\n\n# `JointEnergyModels.jl`\n\nDocumentation for [JointEnergyModels.jl](https://github.com/juliatrustworthyai/JointEnergyModels.jl).\n\n---\nexecute: \n  eval: false\n---\n\n*Joint Energy Models in Julia.*\n\n[![Stable](https://img.shields.io/badge/docs-stable-blue.svg)](https://juliatrustworthyai.github.io/JointEnergyModels.jl/stable)\n[![Dev](https://img.shields.io/badge/docs-dev-blue.svg)](https://juliatrustworthyai.github.io/JointEnergyModels.jl/dev)\n[![Build Status](https://github.com/juliatrustworthyai/JointEnergyModels.jl/actions/workflows/CI.yml/badge.svg?branch=main)](https://github.com/juliatrustworthyai/JointEnergyModels.jl/actions/workflows/CI.yml?query=branch%3Amain)\n[![Coverage](https://codecov.io/gh/juliatrustworthyai/JointEnergyModels.jl/branch/main/graph/badge.svg)](https://codecov.io/gh/juliatrustworthyai/JointEnergyModels.jl)\n[![Code Style: Blue](https://img.shields.io/badge/code%20style-blue-4495d1.svg)](https://github.com/invenia/BlueStyle)\n[![License](https://img.shields.io/github/license/juliatrustworthyai/JointEnergyModels.jl)](LICENSE)\n[![Package Downloads](https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/JointEnergyModels/)](https://pkgs.genieframework.com?packages=JointEnergyModels)\n\n\n\n`JointEnergyModels.jl` is a package for training Joint Energy Models in Julia. Joint Energy Models (JEM) are hybrid models that learn to discriminate between classes $y$ and generate input data $x$. They were introduced in @grathwohl2020your, which provides the foundation for the methodologies implemented in this package.\n\n## 🔁 Status\n\nThis package is still in its infancy and the API is subject to change. Currently, the package can be used to train JEMs for classification. It is also possible to train pure Energy-Based Models (EBMs) for the generative task only. The package is compatible with `Flux.jl`. Work on compatibility with `MLJ.jl` (through `MLJFlux.jl`) is currently under way.\n\nWe welcome contributions and feedback at this early stage. To install the development version of the package you can run the following command:\n\n```{.julia}\nusing Pkg\nPkg.add(url=\"https://github.com/juliatrustworthyai/JointEnergyModels.jl\")\n```\n\n## 🔍 Usage Example\n\nBelow we first generate some synthetic data:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nnobs=2000\nX, y = make_circles(nobs, noise=0.1, factor=0.5)\nXplot = Float32.(permutedims(matrix(X)))\nX = table(permutedims(Xplot))\nplt = scatter(Xplot[1,:], Xplot[2,:], group=y, label=\"\")\nbatch_size = Int(round(nobs/10))\ndisplay(plt)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-commonmark/cell-3-output-1.svg){}\n:::\n:::\n\n\nThe `MLJ` compatible classifier can be instantiated as follows:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n𝒟x = Normal()\n𝒟y = Categorical(ones(2) ./ 2)\nsampler = ConditionalSampler(𝒟x, 𝒟y, input_size=size(Xplot)[1:end-1], batch_size=batch_size)\nclf = JointEnergyClassifier(\n    sampler;\n    builder=MLJFlux.MLP(hidden=(32, 32, 32,), σ=Flux.relu),\n    batch_size=batch_size,\n    finaliser=x -> x,\n    loss=Flux.Losses.logitcrossentropy,\n)\n```\n:::\n\n\nIt uses the `MLJFlux` package to build the model:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nprintln(typeof(clf) <: MLJFlux.MLJFluxModel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrue\n```\n:::\n:::\n\n\nThe model can be wrapped in data and trained using the `fit!` function:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nmach = machine(clf, X, y)\nfit!(mach)\n```\n:::\n\n\nThe results are visualised below. The model has learned to discriminate between the two classes (as indicated by the contours) and to generate samples from each class (as indicated by the stars).\n\n\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-commonmark/cell-8-output-1.svg){}\n:::\n:::\n\n\n## 🎓 References\n\n",
    "supporting": [
      "index_files/figure-commonmark"
    ],
    "filters": []
  }
}