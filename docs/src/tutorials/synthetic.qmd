# Synthetic Data

```{julia}
#| echo: false
include("docs/setup_docs.jl")
eval(setup_docs)
```

## Binary Classification

```{julia}
X, y = make_blobs(1000, 2, centers=3)
X = Float32.(permutedims(matrix(X)))
y_labels = Int.(y.refs)
y = Flux.onehotbatch(y, sort(unique(y_labels)))
display(scatter(X[1,:], X[2,:], color=vec(y_labels), label=""))
batch_size = 32
train_set = DataLoader((X, y), batchsize=batch_size, shuffle=true)
```

```{julia}
n_hidden = 32
models = Dict(
    "Logistic Regression" => Chain(Dense(2, 3)),
    "MLP" => Chain(Dense(2, n_hidden, elu), Dense(n_hidden, 3)),
)
```

```{julia}
loss(y_hat, y) = Flux.Losses.logitcrossentropy(y_hat, y)
rule = Descent(0.1)
```

```{julia}
_lims = extrema(X, dims=2)
x1, x2 = map(ex -> range(1.1f0.*ex..., length=100), _lims)
n_epochs = 100
plts = []
for (name, model) in models
    opt_state = Flux.setup(rule, model)
    for epoch in 1:n_epochs
        Flux.train!(model, train_set, opt_state) do m, x, y
            loss(model(x), y)
        end
    end
    plt = contour(x1, x2, (x, y) -> softmax(model([x, y]))[1], fill=true, alpha=0.5, title=name, cbar=false)
    scatter!(X[1,:], X[2,:], color=vec(y_labels), label="")
    push!(plts, plt)
end
plot(plts..., layout=(1, 2), size=(800, 400))
```

## Joint Energy Model

```{julia}
# We initialize the full model:
𝒟x = Normal()
𝒟y = Categorical(ones(2) ./ 2)
sampler = UnconditionalSampler(𝒟x, input_size=size(X)[1:end-1], batch_size=batch_size)
jem = JointEnergyModel(models["MLP"], sampler)
# Initialise training:
opt = Descent()
opt_state = Flux.setup(opt, jem)
num_epochs = 50
```

```{julia}
logs = JointEnergyModels.train_model(
    jem, train_set, opt_state; 
    num_epochs=num_epochs,
    α=0.1,
)
```


```{julia}
plts = []
for target in 1:3
    plt = contour(x1, x2, (x, y) -> softmax(jem([x, y]))[target], fill=true, alpha=0.5, title="Target: $target", cbar=false)
    scatter!(X[1,:], X[2,:], color=vec(y_labels), group=vec(y_labels))
    push!(plts, plt)
end
plot(plts..., layout=(1, 3), size=(1200, 400))
```

```{julia}
X̂ = generate_samples(jem, 1000)
ŷ = onecold(softmax(jem(X̂)))
scatter(X[1,:], X[2,:], color=vec(y_labels), group=vec(y_labels), alpha=0.5)
scatter!(X̂[1,:], X̂[2,:], color=vec(ŷ), group=vec(ŷ), title="Generated Samples", shape=:star5)
```

