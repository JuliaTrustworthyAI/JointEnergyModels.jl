# Synthetic Data

```{julia}
#| echo: false
include("docs/setup_docs.jl")
eval(setup_docs)
```

## Binary Classification

```{julia}
X, y = make_blobs(1000, 2, centers=2)
X = Float32.(permutedims(matrix(X)))
y = permutedims(Int.(y.refs))
y[y .== 2] .= 0
display(scatter(X[1,:], X[2,:], color=vec(y), label=""))
train_set = DataLoader((X, y), batchsize=32)
```

```{julia}
models = Dict(
    "Logistic Regression" => Chain(Dense(2, 1, σ)),
    "MLP" => Chain(Dense(2, 4, σ), Dense(4, 1, σ)),
)
```

```{julia}
loss(y_hat, y) = Flux.Losses.binarycrossentropy(y_hat, y)
rule = Descent(0.1)
```

```{julia}
_lims = extrema(X, dims=2)
x1, x2 = map(ex -> range(1.1f0.*ex..., length=100), _lims)
n_epochs = 100
plts = []
for (name, model) in models
    opt_state = Flux.setup(rule, model)
    for epoch in 1:n_epochs
        Flux.train!(model, train_set, opt_state) do m, x, y
            loss(m(x), y)
        end
    end
    plt = contour(x1, x2, (x, y) -> model([x, y])[1], fill=true, alpha=0.5, title=name, cbar=false)
    scatter!(X[1,:], X[2,:], color=vec(y), label="")
    push!(plts, plt)
end
plot(plts..., layout=(1, 2), size=(800, 400))
```



## Multiclass Classification